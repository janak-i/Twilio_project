c
sms_service.call
sms_service
n
sms_service = Twilio::SmsService.new(message, phone_number)
phone_number
message
n
user.save
n
user_params
c
to_phone_number
c
n
TWILIO_AUTH_TOKEN
TWILIO_ACCOUNT_SID
c
n
nn
n
TWILIO_AUTH_TOKEN
TWILIO_ACCOUNT_SID
c
n
to_phone_number
body
c
@abc
c
@user_data
c
@user
c
@user
c
user.reset_password!(params[:password])
user.reset_password!(params[:password])\
user.reset_password!
user.reset_password
user
n
user.present? && user.password_token_valid?
user.present?
n
user = User.find_by(reset_password_token: token)
n
params[:user][:email].blank?
n
token = params[:token].to_s
c
n
user.present? && user.password_token_valid?
n
user = User.find_by(reset_password_token: token)
n
params[:user][:email].blank?
n
token = params[:token].to_s
oken = params[:token].to_s
c
params[:email].blank?
n
token = params[:token].to_s
params[:user]
params
c
user.generate_password_token!
user
n
user.present?
n
user = User.find_by(email: params[:user][:email])
User.find_by(email: params[:user][:email])
n
params[:user][:email].blank?
c
params[:user][:email]
params[:user]
params
c
@current_user ||= User.find(id: user)
@current_user ||= User.find(id: abc)
abc
c
user = User.find_by(id:user_data)
user
user = User.find_by(id:user_data)
user = User.find(user_data)
user = User.find(id: user_data)
user_data
user-data
n
 user_data=decode_data[0]['user_data'] unless !decode_data
n
decode_data = decode_user_data(request.headers["token"])
c
 @current_user ||= User.find_by(id: user_data)
 User.find_by(id: user_params)
 User.find_by(id: user_data)
user_data
c
 @current_user = User.find(id: user_data['id']) if user
 @current_user = User.find(id: user['id']) if user
 @current_user = User.find_by(id: user['id']) if user
User.find_by(id: user_data['id'])
User.find_by(id: user['id'])
c
abc=user.id
user.id
n
 user = User.find(user_data)
n
user_data=decode_data[0]['user_data'] unless !decode_data
n
decode_data = decode_user_data(request.headers["token"])
c
a.email
a.id
a=User.find(user_data)
User.find(user_data)
User.find(user_data.)
User.find(user_data.user_id)
User.find(user_data.id)
User.find(user_data)
User.find(user_data&.id)
User.find(user_data)
user_data
decode_data[0]["user_data"]
decode_data[0]
 decode_data = decode_user_data(request.headers["token"])
user_data=decode_data[0]['user_data'] unless !decode_data
 user = User.find(user_data&.id)
n
 user_data=decode_data[0]['user_data'] unless !decode_data
 user_data=decode_data[0]['user_data'] unless !decode_dat
n
decode_data = decode_user_data(request.headers["token"])
c
user=User.find(user_data&.id)
user=User.find(user_data.id)
user=User.find(user_data)
user=User.find(user_data&.id)
user=User.find(user_data&.i)
user=User.find(user_data)
user=User.find(user_data&.id)
User.find(user_data&.id)
User.find(user_data)
User.find_by(user_data)
n
decode_data[0]['user_data']
n
 decode_data = decode_user_data(request.headers["token"])
c
user=User.find(user_data)
User.find(user_data)
User.find(user_data.id)
User.find(user_data)
User.find(user_data&.id)
n
decode_data[0]['user_data']
n
decode_data = decode_user_data(request.headers["token"])
c
v
decode_data[0]['user_data']
decode_data[0]['data']
decode_data[0]
n
 decode_data = decode_user_data(request.headers["token"])
c
ecode_data = decode_user_data(request.headers["token"])
c
 @current_user = User.find_by(id: user_params['id']) if user_data
 @current_user = User.find_by(id: user['id']) if user_data
 @current_user = User.find_by(id: user_data['id']) if user_data
c
@current_user ||= User.find_by(user_params)
@current_user ||= User.find_by(user_data)
c
@current_user ||= User.find(user_data)
@current_user ||= User.find(user)
User.find(use_data)
User.find(user)
c
params[:user][:email]
params[:email]
c
user.save
n
user_params
c
n
user = User.find_by(email: params[:user][:email])
c
params[:user][:email]
params[user][:email]
params['user'][:email]
params['user']
params
c
params[:email]
param[:email]
c
params[:email]
param[:email]
params[:email]
c
user = User.find_by(email: params[:email])
user = User.find(email: params[:email])
user = User.find_by(email: params[:email])
c
users=User.all
c
user=User.new(user_params)
c
users=User.all
c
user = User.find_by(email: params[:email])
params[:email]
c
n
user_params
users_params
c
user_params
c
n
params.require(:user).permit(:email, :password)
n
user=User.new(user_params)
user_params
c
params
user_params
c
super
user
params.require(:userc)
params.require(:user)
params
params.require
c
user_params
c
params.require(:users)
params
params.
params.require()
params.require(:users)
params.require(:user)
params
params.require(:user).permit(:email, :password)
c
user_params
